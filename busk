#!/usr/bin/env python3

"""
busk - a tool to find (and sporadically rename) stuff
License: BSD 3-Clause
Copyright (c) 2020, Mauro <mauro@sdf.org>
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

__author__ = "Mauro L."
__version__ = "0.0.1"
__license__ = "BSD3"

import re
import shutil
import argparse
from pathlib import Path

RE_DEFAULT = "(.*)"


def _replace(a, b, c):
    return re.sub(a, b, c, flags=re.IGNORECASE)


def _Paths(*pargs: list) -> list:
    return [p if isinstance(p, Path) else Path2(p) for p in pargs]


def _find_this(*fargs):
    f = [_ for _ in fargs if _ and _ != RE_DEFAULT]
    if f:
        return f[0]
    else:
        return None


def Path2(path: str) -> Path:
    return Path().cwd() if path == "." else Path(path)


def copy_to(src: Path, dst: Path) -> None:
    shutil.copy(src, dst)


def move_to(src: Path, dst: Path) -> None:
    src, dst = _Paths(src, dst)

    if src.is_dir() and dst.is_dir():
        _dst = Path2(dst) / src.name
        _dst.mkdir(parents=True, exist_ok=True)
        dst = _dst
    else:
        _src = Path(src)
        dst = dst / _src.name

    src.rename(dst)


def rename_to(pattern: str, repl: str, path: Path) -> None:
    path = Path2(path)
    path_dst = _replace(pattern, repl, str(path.absolute()))
    path.rename(path_dst)


def walk_path(path: str) -> None:
    path = Path2(path)
    for fd in path.glob("**/*"):
        if fd.is_dir():
            walk_path(fd)
        yield fd


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=str, default="", help="path")
    parser.add_argument(
        "--no-files",
        action="store_true",
        default=False,
        help="Find Files (default: True)",
    )
    parser.add_argument(
        "--no-dirs",
        action="store_true",
        default=False,
        help="Find Dirs (default: False).",
    )
    parser.add_argument(
        "--just-names",
        action="store_true",
        default=False,
        help="Just names and not absolute path (default: False).",
    )
    parser.add_argument(
        "--loose",
        action="store_true",
        default=False,
        help="Loose keywords (ie: split keywords and match anything).",
    )
    parser.add_argument(
        "--ignore",
        type=str,
        default="",
        help="String(s) to ignore in results. Case Sensitive.",
    )
    parser.add_argument(
        "--regex",
        type=str,
        default=RE_DEFAULT,
        help=f"String Regex. Default: {RE_DEFAULT!r}",
    )
    parser.add_argument(
        "--iregex",
        type=str,
        default=RE_DEFAULT,
        help=f"String Regex. Default: {RE_DEFAULT!r}",
    )
    parser.add_argument(
        "--contains",
        type=str,
        default="",
        help=(
            "String(s) to search. If more than one word, "
            " will search for the combination of these. Case sensitive.",
        ),
    )
    parser.add_argument(
        "--icontains",
        type=str,
        default="",
        help=(
            "String(s) to search. If more than one word, "
            "will search for the combination of these. Case Insensitive."
        ),
    )
    parser.add_argument(
        "--equal",
        type=str,
        default="",
        help="String(s) to search. Will search this exact match. Case Sensitive.",
    )
    parser.add_argument(
        "--iequal",
        type=str,
        default="",
        help="String(s) to search. Will search this exact match. Case Insensitive.",
    )
    parser.add_argument(
        "-cp",
        "--copy-to",
        type=str,
        default="",
        help="Copy file(s) to DEST.",
    )
    parser.add_argument(
        "-mv",
        "--move-to",
        type=str,
        default="",
        help="Move file(s) to DEST.",
    )
    parser.add_argument(
        "-rn",
        "--rename-to",
        type=str,
        default="",
        help="Rename file(s) to DEST.",
    )

    args = parser.parse_args()
    if args.path:
        for f in walk_path(args.path):
            if args.no_files and f.is_file():
                continue

            if args.no_dirs and f.is_dir():
                continue

            if args.loose:
                if args.contains and not any(
                    [w for w in args.contains.split(" ") if w in f.name]
                ):
                    continue

                if args.icontains and not any(
                    [
                        w
                        for w in args.icontains.lower().split(" ")
                        if w in f.name.lower()
                    ]
                ):
                    continue
            else:
                if args.contains and not args.contains in f.name:
                    continue

                if args.icontains and not args.icontains.lower() in f.name.lower():
                    continue

            if args.equal and not args.equal == f.name:
                continue

            if args.iequal and not args.iequal.lower() == f.name.lower():
                continue

            if args.regex and not re.match(args.regex, f.name):
                continue

            if args.iregex and not re.match(args.iregex, f.name, re.IGNORECASE):
                continue

            if not f.exists():
                continue

            if args.ignore and args.ignore in str(f.absolute()):
                continue

            print(f.name if args.just_names else f.absolute())
            if args.copy_to and Path2(args.copy_to).parent.exists():
                copy_to(f, args.copy_to)

            if args.move_to and Path2(args.move_to).parent.exists():
                move_to(f, args.move_to)

            if args.rename_to and Path2(args.rename_to).parent.exists():
                _find = _find_this(
                    args.contains,
                    args.icontains,
                    args.equal,
                    args.iequal,
                    args.regex,
                    args.iregex,
                )
                rename_to(_find, args.rename_to, f)
